<?php

namespace PaymentBundle\Repository;

use Doctrine\ORM\Query\Expr\Join;

/**
 * CartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartRepository extends \Doctrine\ORM\EntityRepository
{
    public function getCurrentCart($user)
    {
        $q = $this->createQueryBuilder('c')
            ->where('c.payment is null AND c.user = :idUser')
            ->orderBy('c.createdAt', 'desc')
            ->setMaxResults(1)
            ->setParameter('idUser', $user->getId());

        $q = $q->getQuery();

        return $q->getOneOrNullResult();
    }

    public function countCart(
        $paid,
        $year = null,
        $mounth = null,
        $partner = null
    ) {
        $q = $this->createQueryBuilder('c')
            ->select('COUNT(c)')
            ->leftJoin('c.user', 'user')
            ->leftJoin('c.payment', 'payment');

        if ($partner) {
            $q
                ->leftJoin('user.partner', 'partner')
                ->where('partner.id = :idPartner')
                ->setParameter('idPartner', $partner->getId());
        }

        if ($mounth) {
            if (!$year) {
                $year = (new \DateTime())->format('Y');
            }

            $fromDate = date_create($year . '-' . $mounth . '-01');
            $toDate = clone $fromDate;
            $toDate->modify('last day of this month');

            $q
                ->andWhere('payment.paymentDate >= :from')
                ->andWhere('payment.paymentDate <= :to')
                ->setParameter('from', $fromDate)
                ->setParameter('to', $toDate);
        } else {
            if ($year) {
                $fromDate = date_create($year . '-' . '01' . '-01');
                $q
                    ->andWhere('payment.paymentDate >= :from')
                    ->setParameter('from', $fromDate);
            }
        }

        if ($paid){
            $q->andWhere('c.payment is not null')
                ->andWhere('payment.statut = \'Paiement réalisé\'');
        } else {
            $q->andWhere('c.payment is null or payment.statut <> \'Paiement réalisé\'');
        }

        $q = $q->getQuery();

        return $q->getSingleScalarResult();
    }

    public function countAmountCart(
        $year = null,
        $mounth = null,
        $partner = null
    ) {
        $q = $this->createQueryBuilder('c')
            ->select('SUM(payment.amount/100)')
            ->leftJoin('c.user', 'user')
            ->leftJoin('c.payment', 'payment')
            ->andWhere('c.payment is not null')
            ->andWhere('payment.statut = \'Paiement réalisé\'');

        if ($partner) {
            $q
                ->leftJoin('user.partner', 'partner')
                ->where('partner.id = :idPartner')
                ->setParameter('idPartner', $partner->getId());
        }

        if ($mounth) {
            if (!$year) {
                $year = (new \DateTime())->format('Y');
            }

            $fromDate = date_create($year . '-' . $mounth . '-01');
            $toDate = clone $fromDate;
            $toDate->modify('last day of this month');

            $q
                ->andWhere('payment.paymentDate >= :from')
                ->andWhere('payment.paymentDate <= :to')
                ->setParameter('from', $fromDate)
                ->setParameter('to', $toDate);
        } else {
            if ($year) {
                $fromDate = date_create($year . '-' . '01' . '-01');
                $q
                    ->andWhere('payment.paymentDate >= :from')
                    ->setParameter('from', $fromDate);
            }
        }

        $q = $q->getQuery();

        return $q->getSingleScalarResult();
    }

    public function search(
        $data,
        $paid,
        $page = 0,
        $max = null,
        $getCount = false,
        $partner = null
    ) {
        $qb = $this->createQueryBuilder('c');

        if ($getCount) {
            $qb->select('COUNT(c)');
        }

        $qb
            ->leftJoin('c.user', 'user')
            ->leftJoin('user.partner', 'partner')
            ->leftJoin('c.payment', 'payment');
        if ($paid){
            $qb->where('c.payment is not null')
                ->andWhere('payment.statut = \'Paiement réalisé\'');
        } else {
            $qb->where('c.payment is null or payment.statut <> \'Paiement réalisé\'');
        }
            
        $qb->orderBy('c.updatedAt', 'DESC');

        $query =
            isset($data['query']) && $data['query'] ? $data['query'] : null;

        if ($query) {
            $qb
                ->andWhere(
                    'partner.nom like :query OR user.username like :query OR user.email like :query'
                )
                ->setParameter('query', '%' . $query . '%');
        }

        if ($partner) {
            $qb
                ->andWhere('partner.id = :partnerId')
                ->setParameter('partnerId', $partner->getId());
        }

        if ($max) {
            $preparedQuery = $qb
                ->getQuery()
                ->setMaxResults($max)
                ->setFirstResult($page * $max);
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getCount
            ? $preparedQuery->getSingleScalarResult()
            : $preparedQuery->getResult();
    }
}
