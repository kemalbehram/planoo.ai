{% extends 'BPBundle::Frontend/bp_form_layout.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .modal {
            top: 5em;
        }
        .table th{
            width: calc(100% / 5)
        }
    </style>
{% endblock stylesheets %}

{% block content %}
    <div class="col s12 m10 offset-m1"><!-- FORM STEP 1 BP -->
        <div class="row">
            <div class="col s12">
                <div class="row"><!--==== charge externes====-->
                    <div class="col s12 center">
                        <button onclick="initAddFormModal(false);" class="btn izy-color-primary-bg"><i class="material-icons left">library_add</i>Ajoutez une personne</button>
                    </div>
                    <!-- ======================================================== -->
                    <!-- MODAL FORM CREATION  ================================== -->
                    <!-- ======================================================== -->
                    <div id="edit-modal" class="modal modal-fixed-footer"><!-- Modal Structure -->
                        <form></form>
                    </div>
                </div>

                <div class="row">
                    <div class="col s12">
                        {{ render(controller('BPBundle:Frontend/Staff:list', {_format: 'html'})) }}
                    </div>
                </div>

                <div class="row"><!--button-->
                    <div class="input-field col s12">
                        <a href="{{ path('financial_bfr_index') }}" class="btn-large izy-color-primary-bg waves-effect waves-light right z-depth-0" type="submit" name="action">Enregistrez et continuez</a>
                    </div>
                </div>
                <span class="form-msg-error-1 is_invisible amber darken-3"></span>
            </div>
        </div>
    </div>
{% endblock content %}



{% block javascripts %}
    {{ parent() }}
    <script>
        var $actualModal = null;
        $(document).ready(function () {
            $('.modal').modal(modalDefaultOptions);
        });

        function initAddFormModal() {
            $('.progress').show();

            $.ajax({
                url: '{{ path('financial_staff_add_form', {idBusinessPlan:idBusinessPlan}) }}',
                type: 'GET',
                success: function (html) {
                    $('form').replaceWith(
                            $(html).find('form')
                            );
                    $('#edit-modal').modal('open');

                    $('select').formSelect();
                    M.updateTextFields();

                    tmpDatepickerDefaultOptionsFinish = Object.assign({}, datepickerDefaultOptions);
                    tmpDatepickerDefaultOptionsFinish.container = $('.main').get();
                    tmpDatepickerDefaultOptionsFinish.minDate = new Date("{{ dateStartActivity|date('Y-m-d') }}");
                    tmpDatepickerDefaultOptionsFinish.maxDate = new Date("{{ dateEndActivity|date('Y-m-d') }}");
                    var $inputFinish = $('form').find('#staff_finishedAt').datepicker(tmpDatepickerDefaultOptionsFinish);
                    $('form').find('#staff_finishedAt').attr("readonly", false);
                    tmpDatepickerDefaultOptions = Object.assign({}, datepickerDefaultOptions);
                    tmpDatepickerDefaultOptions.container = $('.main').get();
                    tmpDatepickerDefaultOptions.minDate = new Date("{{ dateStartActivity|date('Y-m-d') }}");
                    tmpDatepickerDefaultOptions.maxDate = new Date("{{ dateEndActivity|date('Y-m-d') }}");
                    tmpDatepickerDefaultOptions.onClose = function () {
                        tmpDatepickerDefaultOptionsFinish.minDate = this.date;
                        var pickerFinish = $inputFinish.datepicker(tmpDatepickerDefaultOptionsFinish);

                        var dateParts = $inputFinish.val().split("/");
                        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);
                        if (dateObject < this.date) {
                            $inputFinish.val(null);
                        }
                    }
                    $('form').find('#staff_createdAt').datepicker(tmpDatepickerDefaultOptions);
                    $(this).find('#staff_createdAt').attr("readonly", false);
                    $('.progress').hide();
                },
                error: function (html) {
                    $('.progress').hide();
                }
            });
        }

        function initEditFormModal(idStaff) {
            $('.progress').show();

            $.ajax({
                url: '{{ path('financial_staff_edit_form', {id:999999999999}) }}'.replace('999999999999', idStaff),
                type: 'GET',
                success: function (html) {
                    // Replace current position field ...
                    $('form').replaceWith(
                            $(html).find('form')
                            );

                    $('#edit-modal').modal('open');
                    $('select').formSelect();
                    M.updateTextFields();

                    tmpDatepickerDefaultOptionsFinish = Object.assign({}, datepickerDefaultOptions);
                    tmpDatepickerDefaultOptionsFinish.container = $('.main').get();
                    tmpDatepickerDefaultOptionsFinish.minDate = new Date("{{ dateStartActivity|date('Y-m-d') }}");
                    tmpDatepickerDefaultOptionsFinish.maxDate = new Date("{{ dateEndActivity|date('Y-m-d') }}");
                    var $inputFinish = $('form').find('#staff_finishedAt').datepicker(tmpDatepickerDefaultOptionsFinish);
                    $('form').find('#staff_finishedAt').attr("readonly", false);

                    tmpDatepickerDefaultOptions = Object.assign({}, datepickerDefaultOptions);
                    tmpDatepickerDefaultOptions.container = $('.main').get();
                    tmpDatepickerDefaultOptions.minDate = new Date("{{ dateStartActivity|date('Y-m-d') }}");
                    tmpDatepickerDefaultOptions.maxDate = new Date("{{ dateEndActivity|date('Y-m-d') }}");
                    tmpDatepickerDefaultOptions.onClose = function () {
                        tmpDatepickerDefaultOptionsFinish.minDate = this.date;
                        var pickerFinish = $inputFinish.datepicker(tmpDatepickerDefaultOptionsFinish);

                        var dateParts = $inputFinish.val().split("/");
                        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);
                        if (dateObject < this.date) {
                            $inputFinish.val(null);
                        }
                    }
                    $('form').find('#staff_createdAt').datepicker(tmpDatepickerDefaultOptions);
                    $(this).find('#staff_createdAt').attr("readonly", false);

                    $('.progress').hide();
                },
                error: function (html) {
                    $('.progress').hide();
                }
            });
        }

        function saveAction(e, action) {

            $('.progress').show();
            var urlForm = $(e).attr('data-url');

            var method = 'PUT';
            if (action === 'create') {
                method = 'POST';
            }

            var form = $('#edit-modal>form');
            if (!form[0].checkValidity()) {
                form.find('input').each(function ()
                {
                    if (!this.validity.valid)
                    {
                        $(this).focus();
                        $('#submit').click();
                        return false;
                    }
                });
                $('.progress').hide();
                return false;
            }

            //asynchronous creation
            $.ajax({
                method: method,
                url: urlForm,
                data: form.serialize(),
                dataType: 'json',
                success: function (result) {
                    //asynchronous reloading of the list of elements
                    $.ajax({
                        method: 'GET',
                        url: "{{ path('financial_staff_list', {_format:'html'}) }}",
                        success: function (html) {
                            //replace list of element
                            $('#staff-list').replaceWith(
                                    $(html).find('#staff-list')
                                    );
                            $('.dropdown-trigger').dropdown();
                            $('#edit-modal').modal('close');
                            $('.progress').hide();
                        },
                        error: function (request, status, error) {
                            alert('Erreur inconnue');
                        }
                    });
                },
                error: function (request, status, error) {
                    for (var key in request.responseJSON.errors) {
                        for (var i = 0; i < request.responseJSON.errors[key].length; i++) {
                            if (typeof (request.responseJSON.errors[key][i]) !== "string") {
                                for (var childKey in request.responseJSON.errors[key][i]) {
                                    $element = $('#edit-modal [name="staff[' + key + '][' + i + '][' + childKey + ']"]');
                                    $element.parent().children('.helper-text').attr('data-error', request.responseJSON.errors[key][i][childKey]);
                                    $element.addClass('invalid');
                                }
                            } else {
                                $element = $('#edit-modal [name="staff[' + key + ']"]');
                                $element.parent().children('.helper-text').attr('data-error', request.responseJSON.errors[key]);
                                $element.addClass('invalid');
                            }
                        }
                    }
                    $('.progress').hide();
                }
            });
        }
        function deleteAction(idStaff) {
            if (confirm('Etes-vous sûr de vouloir supprimer cet élément ? Sa suppression sera définitive.')) {
                $('.progress').show();

                //asynchronous deletion
                $.ajax({
                    method: 'DELETE',
                    url: '{{ path('financial_staff_delete', {id:999999999999}) }}'.replace('999999999999', idStaff),
                    success: function (result) {
                        //asynchronous reloading of the list of elements
                        $.ajax({
                            method: 'GET',
                            url: "{{ path('financial_staff_list', {_format:'html'}) }}",
                            success: function (html) {
                                //replace list of element
                                $('#staff-list').replaceWith(
                                        $(html).find('#staff-list')
                                        );
                                $('.dropdown-trigger').dropdown();
                                $('.progress').hide();
                            },
                            error: function (request, status, error) {
                                alert('Erreur inconnue');
                            }
                        });
                    }
                    ,
                    error: function (request, status, error) {
                        alert('Erreur inconnue');
                    }
                }
                );
            }
        }
    </script>
{% endblock %}