<?php

namespace BPBundle\Repository;

/**
 * BusinessPlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessPlanRepository extends \Doctrine\ORM\EntityRepository {

    public function myFindBy($id) {
        $q = $this->createQueryBuilder("bp")
                ->join("bp.user", "u")
                ->addSelect("u")
                ->where('bp.user = :id')
                ->setParameter('id', $id);

        $q = $q->getQuery();

        return $q->getResult();
    }

    public function search($data,$sold, $page = 0, $max = NULL, $getCount = false, $partner = false) {
        $qb = $this->createQueryBuilder("bp");

        if ($getCount) {
            $qb->select('COUNT(bp)');
        }

        $qb->leftJoin("bp.user", "user")
                ->leftJoin("user.partner", "partner");

        if($sold){
            $qb->where('bp.state = \'validate\'');
        } else {
            $qb->where('bp.state <> \'validate\'');
        }
        $qb->andWhere('bp.deletedAt is null')
            ->orderBy('bp.createdAt', 'DESC');

        $query = isset($data['query']) && $data['query'] ? $data['query'] : null;

        if ($query) {
            $qb
                    ->andWhere('partner.nom like :query OR user.username like :query OR user.email like :query OR bp.hash like :query')
                    ->setParameter('query', "%" . $query . "%")
            ;
        }

        if ($partner) {
            $qb->andWhere('partner.id = :partnerId')
                    ->setParameter('partnerId', $partner->getId());
        }

        if ($max) {
            $preparedQuery = $qb->getQuery()
                    ->setMaxResults($max)
                    ->setFirstResult($page * $max)
            ;
        } else {
            $preparedQuery = $qb->getQuery();
        }

        return $getCount ? $preparedQuery->getSingleScalarResult() : $preparedQuery->getResult();
    }

    public function findAllBusinessPlanExiredInXDays($nbDays) {

        $q = $this->createQueryBuilder("bp")
                ->join("bp.user", "u")
                ->join("bp.service", "s")
//                ->addSelect("u")
                ->where('datediff(s.expireEditDate,CURRENT_TIME()) = :nbDays')
                ->setParameter('nbDays', $nbDays);

        $q = $q->getQuery();

        return $q->getResult();
    }

}
