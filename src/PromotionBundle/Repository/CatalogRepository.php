<?php

namespace PromotionBundle\Repository;

use PromotionBundle\Entity\Catalog;

/**
 * CatalogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CatalogRepository extends \Doctrine\ORM\EntityRepository
{
    public function getBusinessPlanItems() {
        $q = $this->createQueryBuilder("c")
                ->select('c')
                ->where('c.type = :catalogType AND c.buyable = 1')
                ->orderBy('c.price', 'asc')
                ->setParameter('catalogType', Catalog::CATALOG_TYPE_BP);

        $q = $q->getQuery();

        return $q->getResult();
    }
    public function getBPUpgradeItems($catalogSource) {
        $q = $this->createQueryBuilder("c")
                ->select('c')
                ->where('c.type = :catalogType')
                ->andWhere('c.buyable = 1')
                ->andWhere('c.catalogSource = :catalogSource')
                ->orderBy('c.price', 'asc')
                ->setParameter('catalogSource', $catalogSource->getId())
                ->setParameter('catalogType', Catalog::CATALOG_TYPE_BP_UPGRADE);

        $q = $q->getQuery();

        return $q->getResult();
    }

    public function getFirstFormula() {
        $q = $this->createQueryBuilder("c")
                ->select('c')
                ->where('c.type = :catalogType')
                ->andWhere('c.buyable = 1')
                ->orderBy('c.price', 'asc')
                ->setMaxResults(1)
                ->setParameter('catalogType', Catalog::CATALOG_TYPE_BP);

        $q = $q->getQuery();

        return $q->getSingleResult();
    }

    public function getLastFormula() {
        $q = $this->createQueryBuilder("c")
                ->select('c')
                ->where('c.type = :catalogType')
                ->andWhere('c.buyable = 1')
                ->orderBy('c.price', 'desc')
                ->setMaxResults(1)
                ->setParameter('catalogType', Catalog::CATALOG_TYPE_BP);

        $q = $q->getQuery();

        return $q->getSingleResult();
    }

    public function getNextCatalogUpgrade($catalog) {
        $q = $this->createQueryBuilder("c")
        ->select('c')
        ->where('c.type = :catalogType')
        ->andWhere('c.buyable = 1')
        ->andWhere('c.catalogSource = :catalogSource')
        ->orderBy('c.price', 'asc')
        ->setMaxResults(1)
        ->setParameter('catalogSource', $catalog->getId())
        ->setParameter('catalogType', Catalog::CATALOG_TYPE_BP_UPGRADE);

        $q = $q->getQuery();

        return $q->getOneOrNullResult();
    }

    public function getPremiumUpgrade($catalog) {
        $q = $this->createQueryBuilder("c")
        ->select('c')
        ->where('c.type = :catalogType')
        ->andWhere('c.buyable = 1')
        ->andWhere('c.catalogSource = :catalogSource')
        ->andWhere('c.catalogDestination = :catalogDestination')
        ->setMaxResults(1)
        ->setParameter('catalogSource', $catalog->getId())
        ->setParameter('catalogDestination', Catalog::CATALOG_FORMULE_PREMIUM)
        ->setParameter('catalogType', Catalog::CATALOG_TYPE_BP_UPGRADE);

        $q = $q->getQuery();

        return $q->getOneOrNullResult();
    }

    public function getProUpgrade($catalog) {
        $q = $this->createQueryBuilder("c")
        ->select('c')
        ->where('c.type = :catalogType')
        ->andWhere('c.buyable = 1')
        ->andWhere('c.catalogSource = :catalogSource')
        ->andWhere('c.catalogDestination = :catalogDestination')
        ->setMaxResults(1)
        ->setParameter('catalogSource', $catalog->getId())
        ->setParameter('catalogDestination', Catalog::CATALOG_FORMULE_PRO)
        ->setParameter('catalogType', Catalog::CATALOG_TYPE_BP_UPGRADE);

        $q = $q->getQuery();

        return $q->getOneOrNullResult();
    }
}
